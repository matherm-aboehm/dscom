using System.Reflection;
using System.Runtime.InteropServices;

namespace dSPACE.Runtime.InteropServices;

/// <summary>Provides a callback mechanism for the type library converter to inform the caller of the status of the conversion, and involve the caller in the conversion process itself.</summary>
[Guid("F1C3BF76-C3E4-11d3-88E7-00902754C43A")]
[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
[ComVisible(true)]
public interface ITypeLibImporterNotifySink
{
    /// <summary>Notifies the caller that an event occured during the conversion of a type library.</summary>
    /// <param name="eventKind">An <see cref="T:System.Runtime.InteropServices.ImporterEventKind" /> value indicating the type of event.</param>
    /// <param name="eventCode">Indicates extra information about the event.</param>
    /// <param name="eventMsg">A message generated by the event.</param>
    void ReportEvent(ImporterEventKind eventKind, int eventCode, string eventMsg);

    /// <summary>Asks the user to resolve a reference to another type library.</summary>
    /// <returns>The assembly corresponding to <paramref name="typeLib" />.</returns>
    /// <param name="typeLib">The object implementing the <see langword="ITypeLib" /> interface that needs to be resolved.</param>
    Assembly ResolveRef([MarshalAs(UnmanagedType.Interface)] object typeLib);
}
