<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  Copyright 2022 dSPACE GmbH, Carsten Igel and Contributors

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <DsComClientDir>$(MsBuildThisFileDirectory)..\dscom.client\</DsComClientDir>
    <DsComClientToolsTargetDir>$(MsBuildThisFileDirectory)obj\tools\</DsComClientToolsTargetDir>
    <DsComBuildParameters>PackForBuildTaskTools=true;PublishSingleFile=true;SelfContained=false;Configuration=Release;TargetFramework=$(DsComBuildTargetFrameWork)</DsComBuildParameters>
  </PropertyGroup>

  <!-- 
   Hook into the generate NuSpec generation target of NuGet.Build.Tasks.Pack.targets
   -->
  <PropertyGroup>
    <GenerateNuspecDependsOn>$(GenerateNuspecDependsOn);DsComBuildPackTaskDependencies;DsComBuildPackTool</GenerateNuspecDependsOn>
  </PropertyGroup>

  <!--
    Bundle dependent library. See https://github.com/dotnet/msbuild/issues/1755 for details.

    As referred to by https://natemcmaster.com/blog/2017/11/11/msbuild-task-with-dependencies/
  -->
  <Target Name="DsComBuildPackTaskDependencies">
    <!--
    The include needs to happen after output has been copied to build output folder
    but before NuGet generates a nuspec. See https://github.com/NuGet/Home/issues/4704.
    -->
    <ItemGroup>
      <!--
      Needs a temporary for %(RecursiveDir) metadata to work around error MSB4120.
      See https://aka.ms/msbuild/metadata-self-ref
      Newer NuGet tools automatically appends %(RecursiveDir) to the PackagePath,
      when the final path for the package file is constructed, so %(RecursiveDir)
      should not be included in the %(PackagePath) metadata in the first place.
      The %(RecursiveDir) metadata will be saved to %(NuGetRecursiveDir) metadata,
      to avoid possible bugs when this target will be used by outer MSBuild calls.
      See https://github.com/Microsoft/msbuild/issues/3121
      -->
      <_PackageFileTemp Include="$(MsBuildThisFileDirectory)\bin\$(Configuration)\*\dSPACE.Runtime.InteropServices.dll" />
      <_TargetPathsToSymbolsTemp Include="$(MsBuildThisFileDirectory)\bin\$(Configuration)\*\dSPACE.Runtime.InteropServices.pdb" />
      <!-- Can't use _PackageFiles when TPM is specified with TargetPlatformIdentifier,
        because the final target path is only constructed from PackagePath and 
        RecursiveDir metadata, without any translation.
        Instead use specific items for build output types, so TFMs get properly
        translated to include TPMs from assets lock file. -->
      <_BuildOutputInPackage Include="@(_PackageFileTemp)">
        <FinalOutputPath>%(FullPath)</FinalOutputPath>
        <TargetFramework>$([System.String]::new('%(RecursiveDir)').TrimEnd('\'))</TargetFramework>
        <Visible>false</Visible>
        <TargetPath>%(Filename)%(Extension)</TargetPath>
      </_BuildOutputInPackage>
      <_TargetPathsToSymbols Include="@(_TargetPathsToSymbolsTemp)">
        <FinalOutputPath>%(FullPath)</FinalOutputPath>
        <TargetFramework>$([System.String]::new('%(RecursiveDir)').TrimEnd('\'))</TargetFramework>
        <Visible>false</Visible>
        <TargetPath>%(Filename)%(Extension)</TargetPath>
      </_TargetPathsToSymbols>
    </ItemGroup>
  </Target>

  <!--
    Bundle Tool. Required for NetStandard 2.0 and x86 Builds
  -->
  <Target Name="DsComBuildPackTool" DependsOnTargets="DsComPackTargetCompleted;DsComBuildPublishTool">
    <ItemGroup>
      <_PackageFiles Include="$(DsComClientToolsTargetDir)\x64\dscom.exe">
        <PackagePath>tools\x64\</PackagePath>
        <Visible>false</Visible>
        <BuildAction>Content</BuildAction>
      </_PackageFiles>
      <_PackageFiles Include="$(DsComClientToolsTargetDir)\x86\dscom.exe">
        <PackagePath>tools\x86\</PackagePath>
        <Visible>false</Visible>
        <BuildAction>Content</BuildAction>
      </_PackageFiles>
    </ItemGroup>
  </Target>

  <Target Name="DsComBuildUpdateTargetFrameworks" BeforeTargets="GenerateNuSpec" AfterTargets="_GetTargetFrameworksOutput">
    <ItemGroup>
      <!-- Explicitly mark this as netstandard2.0 compliant -->
      <_TargetFrameworks Include="netstandard2.0" />
    </ItemGroup>
  </Target>

  <!--
  Artificial dependency target
  Required to resolve bad execution ordering when Pack and Restore targets are running in parallel
  for the same project, but from different callers with different restore properties.
  -->
  <Target Name="DsComPackTargetCompleted" Condition="'$(BuildingSolutionFile)'=='true'">
    <Message Importance="Normal" Text="Wait for DsCOM lib packing to finish" />
    <ItemGroup>
      <_DependsOnPackingFinishedProjects Include="@(ProjectReference)" />
      <_DependsOnPackingFinishedProjects Include="$(DsComClientDir)dscom.client.csproj" />
    </ItemGroup>
    <MSBuild
      BuildInParallel="true"
      ContinueOnError="false"
      Targets="Pack"
      Projects="@(_DependsOnPackingFinishedProjects)" />
  </Target>

  <!-- Meta Targets -->
  <Target Name="DsComBuildPublishTool" DependsOnTargets="DsComBuildPublishToolX64;DsComBuildPublishToolX86" />

  <Target Name="DsComBuildPublishToolX64" DependsOnTargets="DsComBuildPublishToolRestore;DsComBuildPublishToolPublishX64" />
  <Target Name="DsComBuildPublishToolX86" DependsOnTargets="DsComBuildPublishToolRestore;DsComBuildPublishToolPublishX86" />

  <!-- Build and restore tool -->

  <Target Name="DsComBuildPublishToolRestore">
    <Message Importance="Normal" Text="Restoring DsCOM Client tool in x64/x86 for packing" />
    <MSBuild
      BuildInParallel="true"
      ContinueOnError="false"
      StopOnFirstFailure="true"
      Targets="_GetAllRestoreProjectPathItems;Restore"
      Properties="$(DsComBuildParameters)"
      Projects="$(DsComClientDir)dscom.client.csproj">
      <!-- Return all projects which are restored by this call -->
      <Output TaskParameter="TargetOutputs"
              ItemName="_RestoreProjectPathItems" />
    </MSBuild>
    <!-- Get paths to assets file from specified projects -->
    <MSBuild
      BuildInParallel="true"
      ContinueOnError="false"
      Targets="_GetProjectAssetsFilePath"
      Properties="$(DsComBuildParameters)"
      Projects="@(_RestoreProjectPathItems)">

      <Output TaskParameter="TargetOutputs"
              ItemName="_ProjectAssetsFilePaths" />
    </MSBuild>
    
    <ClearLockFileCache ProjectAssetsFiles="@(_ProjectAssetsFilePaths)" />
  </Target>

  <Target Name="DsComBuildPublishToolPublishX64" DependsOnTargets="DsComBuildPublishToolRestore">
    <Message Importance="Normal" Text="Publishing DsCOM Client tool in x64 for packing" />
    <MSBuild
      BuildInParallel="true"
      ContinueOnError="false"
      StopOnFirstFailure="true"
      Targets="Build;Publish"
      Properties="DisableLockFileCache=true;PublishDir=$(DsComClientToolsTargetDir)\x64;RuntimeIdentifier=win-x64;Platform=x64;$(DsComBuildParameters)"
      Projects="$(DsComClientDir)dscom.client.csproj" />
  </Target>

  <Target Name="DsComBuildPublishToolPublishX86" DependsOnTargets="DsComBuildPublishToolRestore">
    <Message Importance="Normal" Text="Publishing DsCOM Client tool in x86 for packing" />
    <MSBuild
      BuildInParallel="true"
      ContinueOnError="false"
      StopOnFirstFailure="true"
      Targets="Build;Publish"
      Properties="DisableLockFileCache=true;PublishDir=$(DsComClientToolsTargetDir)\x86;RuntimeIdentifier=win-x86;Platform=x86;$(DsComBuildParameters)"
      Projects="$(DsComClientDir)dscom.client.csproj" />
  </Target>
</Project>